{"version":3,"sources":["models/GameActions.ts","shared/images.ts","components/Header.tsx","components/Footer.tsx","components/Category.tsx","components/HomePage.tsx","components/Rating.tsx","components/Card.tsx","components/CardsPage.tsx","shared/categoryImages.ts","components/StatsPage.tsx","components/LoginForm.tsx","app.tsx","index.tsx"],"names":["GameActions","data","category","image","Header","loginForm","setLoginForm","currentAction","setCurrentAction","shuffledAudios","count","setCount","useState","menuVisibility","setMenuVisibility","themeColor","setThemeColor","wrapperRef","useRef","location","useLocation","handleClickOutside","e","current","contains","target","useEffect","document","addEventListener","removeEventListener","Play","Train","pathname","ref","className","onClick","map","index","to","exact","x","includes","console","log","type","id","checked","onChange","htmlFor","Started","Audio","play","Footer","href","src","alt","CategoryItem","imageSrc","Math","random","HomePage","Rating","choices","choice","CardItem","card","setChoices","failures","setFailures","wordParams","trained","correct","incorrect","percentage","changeWordParam","name","param","p","localStorage","getItem","params","JSON","parse","setItem","stringify","handleFlip","preventDefault","flipped","guessWord","stopPropagation","guessed","setTimeout","chosenWrong","slice","length","isFlipped","flipDirection","classList","value","sayWord","onMouseLeave","rus","Date","toLocaleString","CategoryPage","cards","setCards","images","cardObjects","Array","from","StatsPage","singleImg","object","toFixed","LoginForm","App","audios","setAudios","setShuffledAudios","filter","querySelector","setAttribute","sort","path","render","props","match","ReactDOM","getElementById"],"mappings":"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,QAAU,yBAA2B,iBACvGJ,GAAE,UAAKL,EAAEmC,MADb,SAEI,cAAC,EAAD,CACIzE,SAAUA,EACVK,cAAeA,EACf0D,KAAMzB,EACNH,MAAOA,EACP5B,eAAgBA,EAChB0D,SAAUA,EACVC,YAAaA,EACbN,QAASA,EACTI,WAAYA,EACZxD,MAAOA,EACPC,SAAUA,eCvFrBgG,EAAS,CAClB,CACIzG,SAAU,OACVyG,OAAQ,CACJ,SACA,OACA,SACA,UACA,YACA,OACA,WACA,cAEJN,IAAK,CACD,qBACA,iCACA,iCACA,iCACA,yDACA,2BACA,yDACA,mCAGR,CACInG,SAAU,UACVyG,OAAQ,CACJ,SACA,MACA,QACA,MACA,QACA,UACA,UACA,YAEJN,IAAK,CACD,iCACA,iCACA,uCACA,iCACA,2BACA,uCACA,mDACA,mCAGR,CACInG,SAAU,WACVyG,OAAQ,CACJ,QACA,QACA,QACA,YACA,MACA,SACA,MACA,aAEJN,IAAK,CACD,2BACA,yDACA,+DACA,mDACA,mDACA,+DACA,iFACA,iEAGR,CACInG,SAAU,YACVyG,OAAQ,CACJ,QACA,UACA,OACA,UACA,MACA,QACA,QACA,YAEJN,IAAK,CACD,2BACA,iCACA,6CACA,6CACA,2BACA,iCACA,2BACA,mCAGR,CACInG,SAAU,YACVyG,OAAQ,CACJ,MACA,OACA,MACA,OACA,MACA,QACA,UACA,SAEJN,IAAK,CACD,qBACA,2BACA,uCACA,2BACA,2BACA,iCACA,2BACA,mCAGR,CACInG,SAAU,YACVyG,OAAQ,CACJ,QACA,MACA,OACA,OACA,MACA,OACA,MACA,QAEJN,IAAK,CACD,yDACA,uCACA,uCACA,6CACA,uCACA,2BACA,+FACA,+CAGR,CACInG,SAAU,YACVyG,OAAQ,CACJ,QACA,MACA,OACA,OACA,UACA,QACA,OACA,SAEJN,IAAK,CACD,uCACA,6CACA,uCACA,6CACA,uCACA,iCACA,uCACA,+CAGR,CACInG,SAAU,YACVyG,OAAQ,CACJ,QACA,OACA,QACA,MACA,SACA,MACA,OACA,WAEJN,IAAK,CACD,iCACA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","file":"static/js/main.621339ad.chunk.js","sourcesContent":["export enum GameActions {\n    'Train',\n    'Play',\n    'Started'\n}","export const data = [\n    {\n        category: 'clothes',\n        image: 'clothes.png',\n    },\n    {\n        category: 'actions-a',\n        image: 'dance.png',\n    },\n    {\n        category: 'actions-b',\n        image: 'sleep.png',\n    },\n    {\n        category: 'actions-c',\n        image: 'cook.png',\n    },\n    {\n        category: 'food',\n        image: 'food.png',\n    },\n    {\n        category: 'emotions',\n        image: 'happy.png',\n    },\n    {\n        category: 'animals-a',\n        image: 'owl.png',\n    },\n    {\n        category: 'animals-b',\n        image: 'raccoon.png',\n    },\n];\n","import React, { useState, useRef } from 'react';\nimport { data } from '../shared/images';\nimport {\n    NavLink,\n    useLocation\n} from \"react-router-dom\";\nimport { useEffect } from 'react';\n\nimport { GameActions } from '../models/GameActions';\n\ninterface Props {\n    currentAction: GameActions;\n    setCurrentAction: (value: GameActions) => void;\n    shuffledAudios: Array<string>;\n    count: number;\n    setCount: (value: number) => void;\n    loginForm: boolean;\n    setLoginForm: (value: boolean) => void;\n}\n\nexport const Header = ({ loginForm, setLoginForm, currentAction, setCurrentAction, shuffledAudios, count, setCount }: Props) => {\n    const [menuVisibility, setMenuVisibility] = useState(false);\n    const [themeColor, setThemeColor] = useState('pink');\n\n    const wrapperRef = useRef<any>();\n\n    const location = useLocation();\n\n    const changeMode = () => {\n        if (themeColor === 'blue') {\n            setThemeColor('pink');\n        } else setThemeColor('blue');\n        setCurrentAction(currentAction === GameActions.Train ? GameActions.Play : GameActions.Train);\n    }\n\n    const openMenu = () => {\n        setMenuVisibility(!menuVisibility);\n    }\n\n    const handleClickOutside = (e: Event) => {\n        if (wrapperRef.current && !wrapperRef.current.contains(e.target)) {\n            setMenuVisibility(false);\n        }\n    }\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => document.removeEventListener('mousedown', handleClickOutside);\n    });\n\n    useEffect(() => {\n        if (currentAction !== GameActions.Play) {\n            setCurrentAction(GameActions.Train);\n        }\n        setMenuVisibility(false);\n    }, [location.pathname])\n\n    const changeStartButton = (e: React.MouseEvent) => {\n        if (currentAction === GameActions.Started) {\n            new Audio(shuffledAudios[count]).play();\n        }\n        setCurrentAction(GameActions.Started);\n    }\n\n    const openLoginForm = () => {\n        setMenuVisibility(false)\n        setLoginForm(true);\n        console.log(loginForm)\n    }\n\n    return (\n        <header>\n            <span ref={wrapperRef}>\n                <div className=\"hamburger-menu\" onClick={openMenu}>\n                    {[1, 2, 3].map(index => <div key={\"line-\" + index} className={`line line-${index} \n                    ${menuVisibility ? \"cross\" : \"\"} ${themeColor === 'blue' ? \"light-blue\" : \"\"}`}></div>)}\n                </div>\n                <nav className={`${menuVisibility === true ? \"navbar active\" : \"navbar\"} ${themeColor === 'blue' ? \"blue\" : \"\"}`}>\n                    <ul className=\"nav-list\">\n                        <li className=\"nav-item\">\n                            <NavLink to=\"/\" exact={true} className={`nav-link ${location.pathname === \"/\" ? \"active\" : \"\"}`}>Main Page</NavLink>\n                        </li>\n                        {\n                            data.map((x, index) =>\n                                <li key={index} className={`nav-item`}>\n                                    <NavLink to={\"/category/\" + x.category} className={`nav-link \n                                    ${location.pathname.includes(\"/category/\" + x.category) ? \"active\" : \"\"}`}>{x.category}</NavLink>\n                                </li>\n                            )\n                        }\n                        <li className=\"nav-item\">\n                            <NavLink to=\"/statistics\" className={`nav-link ${location.pathname === \"/statistics\" ? \"active\" : \"\"}`}>Statistics</NavLink>\n                        </li>\n                        <li className=\"nav-item\">\n                            <NavLink to=\"/login\" className=\"log-in-button\" onClick={ () => openLoginForm() }>Log in</NavLink>\n                        </li>\n                    </ul>\n                </nav>\n            </span>\n            <div className=\"buttons\">\n                <div className=\"toggler\">\n                    <input type=\"checkbox\" className=\"checkbox\" id=\"checkbox\" checked={currentAction === GameActions.Train ?\n                        false :\n                        true\n                    } onChange={changeMode} />\n                    <label htmlFor=\"checkbox\" className=\"label\">\n                        <div className=\"play-mode\">Play</div>\n                        <div className=\"train-mode\">Train</div>\n                        <div className=\"ball\"></div>\n                    </label>\n                </div>\n                {\n                    currentAction !== GameActions.Train && location.pathname !== '/' ?\n                        <button className=\"start-game\" onClick={(e) => changeStartButton(e)}>{currentAction === GameActions.Started ? 'repeat' : 'play'}</button> :\n                        <div></div>\n                }\n            </div>\n        </header>\n    );\n};\n","import React, { useState, useRef, MouseEvent } from 'react';\nimport ReactDOM from 'react-dom';\n\nexport const Footer = () => {\n    return (\n        <footer>\n            <a href=\"https://github.com/Wellval\">Github</a>\n            <div className=\"rs-logo-year\">2021\n            <a className=\"logo-link\" href=\"https://rs.school/js/\">\n                <img src=\"../rs-school-logo.svg\" alt=\"\" />\n            </a>\n            </div>\n        </footer>\n    )\n}","import { NavLink } from 'react-router-dom';\n\ninterface Props {\n    imageSrc: string;\n    category: string\n}\nexport const CategoryItem = ({ imageSrc, category }: Props) => {\n    return (\n        <NavLink to={\"/category/\" + category} key={Math.random()} className={`pink-card`}>\n            <img src={imageSrc} />\n            <p>{category}</p>\n        </NavLink>\n    )\n}","import { CategoryItem } from './Category';\nimport { data } from '../shared/images';\n\n\nexport const HomePage = () => {\n    return (\n        <main>\n            <div className=\"main-wrapper\">\n                {\n                    data.map((x, index) =>\n                        <div className='main-card-container'>\n                            <CategoryItem \n                                imageSrc={x.image}\n                                category={x.category}\n                            />\n                        </div>\n                    )\n                }\n            </div>\n        </main>\n    );\n}","import React, { useEffect } from 'react';\nimport { GameActions } from '../models/GameActions';\n\ninterface Props {\n    choices: Array<boolean>;\n    currentAction: GameActions;\n}\n\nexport const Rating = ({ choices, currentAction }: Props) => {\n\n    return (\n        <div className=\"rating\">\n            {\n                currentAction === GameActions.Started ? choices.map(choice =>\n                    choice === true ? <i className=\"fas fa-star\"></i> : <i className=\"fas fa-heart-broken\"></i>\n                ) : ''\n            }\n\n        </div>\n    );\n}","import ReactCardFlip from 'react-card-flip';\nimport { GameActions } from '../models/GameActions';\nimport { Category } from '../models/CategoryInterface'\nimport { Card } from '../models/CardInterface'\n\ninterface Props {\n    category: Category;\n    currentAction: GameActions;\n    card: Card;\n    index: number;\n    choices: Array<boolean>\n    setChoices: (value: Array<boolean>) => void;\n    count: number;\n    setCount: (value: number) => void;\n    failures: number;\n    setFailures: (value: number) => void;\n    shuffledAudios: Array<string>\n}\n\nexport const CardItem = ({ shuffledAudios, category, currentAction, card, index, choices, setChoices, count, setCount, failures, setFailures }: Props) => {\n    const wordParams = {\n        trained: 0,\n        correct: 0,\n        incorrect: 0,\n        percentage: 0\n    }\n\n    const changeWordParam = (name: string, param: number, p: string) => {\n        if (!localStorage.getItem(name)) {\n            param++;\n            localStorage.setItem(name, JSON.stringify(wordParams))\n        } else {\n            let params = JSON.parse(localStorage.getItem(name)!);\n            params[p]++;\n            localStorage.setItem(name, JSON.stringify(params))\n        }\n    }\n\n    const handleFlip = (name: string, e: React.MouseEvent) => {\n        if (currentAction === GameActions.Train) {\n            e.preventDefault();\n            if (card.name === name) {\n                card.flipped = !card.flipped;\n            }\n            return card;\n        };\n    };\n\n    const sayWord = (e: React.MouseEvent) => {\n        e.preventDefault();\n        if ((e.target as HTMLElement).classList.value !== 'fas fa-redo-alt' && currentAction === GameActions.Train) {\n            new Audio('/' + category.category + '/' + card.name + '.mp3').play();\n        }\n        if (currentAction === GameActions.Train) {\n            changeWordParam(card.name, wordParams.trained, 'trained')\n        }\n    }\n\n    const chosenRight = (name: string) => {\n        setChoices([...choices, true]);\n        setCount(count + 1);\n        changeWordParam(name, wordParams.incorrect, 'correct')\n        new Audio('/well-done.mp3').play();\n        if (card.name === name) {\n            card.guessed = !card.guessed;\n        }\n        setTimeout(() => {\n            new Audio(shuffledAudios[count + 1]).play();\n        }, 2000)\n    }\n\n    const chosenWrong = (name: string) => {\n        changeWordParam(name, wordParams.incorrect, 'incorrect')\n        setChoices([...choices, false]);\n        new Audio('/error.mp3').play();\n        setFailures(failures + 1);\n    }\n\n    const guessWord = (e: React.MouseEvent) => {\n        e.stopPropagation();\n        if (currentAction === GameActions.Started) {\n            shuffledAudios[count].includes(card.name) ? chosenRight(card.name) : chosenWrong(card.name);\n            if (shuffledAudios.slice(count).length - 1 === 0) {\n                (failures === 0) ? new Audio('/success.wav').play() : new Audio('/failure.mp3').play();\n                setTimeout(() => { location.pathname = '/' }, 4000);\n            }\n        }\n    }\n\n    return (\n        <ReactCardFlip key={Date().toLocaleString()} isFlipped={card.flipped} flipDirection=\"vertical\">\n            <div className=\"pink-card\" onClick={(e) => {\n                sayWord(e)\n                guessWord(e)\n            }}>\n                <img className={currentAction !== GameActions.Train ? 'play-mode' : ''}\n                    src={'/' + category.category + '/' + card.name + '.png'} />\n                {\n                    currentAction === GameActions.Train ?\n                        <p className=\"word\">{card.name}<span>\n                            <i className=\"fas fa-redo-alt\" onClick={(e) => handleFlip(card.name, e)}></i>\n                        </span></p> :\n                        ''\n                }\n            </div>\n            <div className=\"pink-card\" onMouseLeave={(e) => handleFlip(card.name, e)}>\n                <img className={currentAction !== GameActions.Train ? 'play-mode' : ''} src={'/' + category.category + '/' + card.name + '.png'} />\n                {\n                    currentAction === GameActions.Train ?\n                        <p className=\"word\">{category.rus[index]}<span><i className=\"fas fa-redo-alt\"></i></span></p> :\n                        ''\n                }\n            </div>\n\n        </ReactCardFlip>\n    )\n}","import { useEffect, useRef, useState } from \"react\";\nimport { GameActions } from '../models/GameActions';\nimport { Rating } from \"./Rating\";\nimport { CardItem } from './Card';\nimport { Card } from '../models/CardInterface';\nimport { Category } from '../models/CategoryInterface';\nimport { LoginForm } from './LoginForm';\n\n\ninterface Props {\n    name: string;\n    currentAction: GameActions;\n    category: Category;\n    shuffledAudios: Array<string>\n    count: number;\n    setCount: (value: number) => void;\n    failures: number;\n    setFailures: (value: number) => void;\n    choices: Array<boolean>\n    setChoices: (value: Array<boolean>) => void;\n    loginForm: boolean;\n    setLoginForm: (value: boolean) => void;\n}\n\n\nexport const CategoryPage = ({ loginForm, setLoginForm, setChoices, choices, currentAction, category, shuffledAudios, count, setCount, failures, setFailures }: Props) => {\n    const [cards, setCards] = useState<Array<Card>>([]);\n    const wrapperRef = useRef<any>();\n    const [token, setToken] = useState();\n\n    // if(!token) {\n    //     return <LoginForm setToken={setToken} />\n    //   }\n\n\n    const handleClickOutside = (e: Event) => {\n        if (wrapperRef.current && !wrapperRef.current.contains(e.target)) {\n            setLoginForm(false);\n            console.log(loginForm)\n        }\n    }\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => document.removeEventListener('mousedown', handleClickOutside);\n    });\n\n    useEffect(() => {\n        if (category.images) {\n            let cardObjects = Array.from(category.images).map(x => ({ name: x, flipped: false, guessed: false }));\n            setCards(cardObjects)\n        }\n        setChoices([]);\n    }, [currentAction, location.pathname]);\n\n    useEffect(() => {\n        if (currentAction === GameActions.Started) {\n            new Audio(shuffledAudios[count]).play();\n        }\n    }, [shuffledAudios])\n\n    const gameOverView = () => <div className='overlay'>\n        {failures === 0 ?\n            <div className='overlay'><h2 className='win'>Success!</h2></div> :\n            <div>\n                <h2 className='loose'>Work more!</h2>\n                <p>Number of mistakes: {failures}</p>\n            </div>\n        }\n    </div>\n\n    const playView = () => <div className=\"main-wrapper\">\n        {\n            cards.map((x, index) =>\n                <div className={(x.guessed === true) && currentAction === GameActions.Started ? 'card-container guessed' : 'card-container'}\n                    id={`${x.name}`}>\n                    <CardItem\n                        category={category}\n                        currentAction={currentAction}\n                        card={x}\n                        index={index}\n                        shuffledAudios={shuffledAudios}\n                        failures={failures}\n                        setFailures={setFailures}\n                        choices={choices}\n                        setChoices={setChoices}\n                        count={count}\n                        setCount={setCount}\n                    />\n                </div>\n            )\n        }\n    </div>\n\n    return (\n        <main>\n            <h2>{category.category}</h2>\n            <Rating\n                choices={choices}\n                currentAction={currentAction}\n            />\n            {(count === shuffledAudios.length && currentAction === GameActions.Started) ?\n                gameOverView() : playView()\n            }\n        </main>\n    );\n}","export const images = [\n    {\n        category: \"food\",\n        images: [\n            'cheese',\n            'cake',\n            'cherry',\n            'coconut',\n            'hamburger',\n            'meat',\n            'sandwich',\n            'watermelon',\n        ],\n        rus: [\n            'сыр',\n            'пирог',\n            'вишня',\n            'кокос',\n            'гамбургер',\n            'мясо',\n            'бутерброд',\n            'арбуз',\n        ],\n    },\n    {\n        category: \"clothes\",\n        images: [\n            'blouse',\n            'bag',\n            'dress',\n            'hat',\n            'skirt',\n            'sweater',\n            't-shirt',\n            'trousers',\n        ],\n        rus: [\n            'блуза',\n            'сумка',\n            'платье',\n            'шляпа',\n            'юбка',\n            'свитер',\n            'футболка',\n            'штаны',\n        ]\n    },\n    {\n        category: 'emotions',\n        images: [\n            'angry',\n            'bored',\n            'happy',\n            'insidious',\n            'sad',\n            'scared',\n            'shy',\n            'surprised'\n        ],\n        rus: [\n            'злой',\n            'скучающий',\n            'счастливый',\n            'коварный',\n            'грустный',\n            'испуганный',\n            'стеснительный',\n            'удивленный'\n        ],\n    },\n    {\n        category: 'animals-a',\n        images: [\n            'eagle',\n            'giraffe',\n            'lamb',\n            'octopus',\n            'owl',\n            'shark',\n            'snake',\n            'squirrel'\n        ],\n        rus: [\n            'орел',\n            'жираф',\n            'ягненок',\n            'осминог',\n            'сова',\n            'акула',\n            'змея',\n            'белка'\n        ],\n    },\n    {\n        category: 'animals-b',\n        images: [\n            'cat',\n            'crab',\n            'dog',\n            'fish',\n            'fox',\n            'panda',\n            'raccoon',\n            'zebra'\n        ],\n        rus: [\n            'кот',\n            'краб',\n            'собака',\n            'рыба',\n            'лиса',\n            'панда',\n            'енот',\n            'зебра'\n        ],\n    },\n    {\n        category: 'actions-a',\n        images: [\n            'dance',\n            'fly',\n            'read',\n            'ring',\n            'run',\n            'sing',\n            'ski',\n            'swim'\n        ],\n        rus: [\n            'танцевать',\n            'летать',\n            'читать',\n            'звонить',\n            'бежать',\n            'петь',\n            'кататься на лыжах',\n            'плавать'\n        ]\n    },\n    {\n        category: 'actions-b',\n        images: [\n            'catch',\n            'cry',\n            'hang',\n            'jump',\n            'present',\n            'sleep',\n            'walk',\n            'teach'\n        ],\n        rus: [\n            'ловить',\n            'плакать',\n            'висеть',\n            'прыгать',\n            'дарить',\n            'спать',\n            'ходить',\n            'обучать'\n        ],\n    },\n    {\n        category: 'actions-c',\n        images: [\n            'carry',\n            'cook',\n            'drink',\n            'eat',\n            'giggle',\n            'hug',\n            'ride',\n            'scratch'\n        ],\n        rus: [\n            'нести',\n            'готовить',\n            'пить',\n            'есть',\n            'хихикать',\n            'обнимать',\n            'ехать',\n            'царапать'\n        ],\n    },\n\n]\n","import { images } from '../shared/categoryImages';\n\ninterface Props {\n    category: Category;\n}\n\ninterface Category {\n    images: Array<string>;\n    category: string;\n    rus: Array<string>;\n}\n\nexport const StatsPage = ({ category }: Props) => {\n    return (\n        <main>\n            <h2>Statistics</h2>\n            <div className=\"stats-container\">\n                <table className=\"stats-table\">\n                    <thead className=\"table-header\">\n                        <tr className=\"stats-titles\">\n                            <th className=\"stats-item\">\n                                Category\n                            </th>\n                            <th className=\"stats-item\">\n                                Word\n                            </th>\n                            <th className=\"stats-item\">\n                                Translation\n                            </th>\n                            <th className=\"stats-item\">\n                                Trained\n                            </th>\n                            <th className=\"stats-item\">\n                                Correct\n                            </th>\n                            <th className=\"stats-item\">\n                                Incorrect\n                            </th>\n                            <th className=\"stats-item\">\n                                Percentage\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            images.map(image => image.images.map((singleImg, index) => {\n                                const object = JSON.parse(localStorage.getItem(singleImg)!);\n                                const trained = (localStorage.getItem(singleImg)) ? +object.trained : 0;\n                                const correct = (localStorage.getItem(singleImg)) ? +object.correct : 0;\n                                const incorrect = (localStorage.getItem(singleImg)) ? +object.incorrect : 0;\n                                const percentage = (correct === 0 && incorrect === 0) ? 0 + '%' : ((100 / (correct + incorrect)) * correct).toFixed(2) + '%';\n                                return <tr>\n                                    <td> {image.category} </td>\n                                    <td> {singleImg} </td>\n                                    <td> {image.rus[index]} </td>\n                                    <td> {trained} </td>\n                                    <td> {correct} </td>\n                                    <td> {incorrect} </td>\n                                    <td> {percentage} </td>\n                                </tr>\n                            }))\n                        }\n\n                    </tbody>\n                </table>\n            </div>\n        </main>\n    )\n}","import PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\n\n\nexport const LoginForm = () => {\n\n    return (\n        <div className=\"content-wrapper\">\n            <div className=\"login-wrapper\">\n                <h1>Please Log In</h1>\n                <form>\n                    <label>\n                        <p>Username</p>\n                        <input type=\"text\" />\n                    </label>\n                    <label>\n                        <p>Password</p>\n                        <input type=\"password\"/>\n                    </label>\n                    <div>\n                        <button type=\"submit\">Submit</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nLoginForm.propTypes = {\n    setToken: PropTypes.func.isRequired\n}\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Header } from './components/Header';\nimport { Footer } from './components/Footer';\nimport { HomePage } from './components/HomePage';\nimport { CategoryPage } from './components/CardsPage';\nimport { images } from './shared/categoryImages';\nimport { GameActions } from './models/GameActions';\nimport { StatsPage } from './components/StatsPage';\nimport { LoginForm } from './components/LoginForm';\n\nexport const App = () => {\n    const [currentAction, setCurrentAction] = useState(GameActions.Train);\n    const [audios, setAudios] = useState<Array<string>>([]);\n    const [choices, setChoices] = useState<Array<boolean>>([]);\n    let [failures, setFailures] = useState<number>(0);\n    const [loginForm, setLoginForm] = useState(false);\n    let [count, setCount] = useState<number>(0);\n    const [shuffledAudios, setShuffledAudios] = useState<Array<string>>([]);\n    const category = images.filter((x) => x.category === location.pathname.slice(10))[0];\n\n    useEffect(() => {\n        if (category) {\n            setAudios(category.images.map(name => `/${category.category}/${name}.mp3`));\n        } \n        document.querySelector('#checkbox')?.setAttribute('checked', 'false');\n    }, [location.pathname])\n\n    useEffect(() => {\n        if (currentAction === GameActions.Started) {\n            setShuffledAudios(audios.slice().sort(() => Math.random() - 0.5));\n        }\n        setCount(0)\n    }, [currentAction]);\n\n    return (\n        <div className=\"view\">\n            <Router>\n                <Header \n                    currentAction={currentAction} \n                    setCurrentAction={setCurrentAction}\n                    shuffledAudios={shuffledAudios}\n                    count={count}\n                    setCount={setCount}\n                    loginForm={loginForm}\n                    setLoginForm={setLoginForm}\n                />\n                <Switch>\n                    <Route path=\"/category/:name\" render={(props) => \n                        <CategoryPage \n                            name={props.match.params.name}\n                            currentAction={currentAction}\n                            category={images.filter((x) => x.category === props.match.params.name)[0]}\n                            shuffledAudios={shuffledAudios}\n                            count={count}\n                            setCount={setCount}\n                            failures={failures}\n                            setFailures={setFailures}\n                            choices={choices}\n                            setChoices={setChoices}\n                            loginForm={loginForm}\n                            setLoginForm={setLoginForm}\n                        />\n                    } />\n                    <Route path=\"/statistics\" render={(props) => \n                        <StatsPage\n                            category={category}\n                        />\n                    } />\n                    <Route path=\"/login\" render={LoginForm} />\n                    <Route exact path=\"/\" render={HomePage} />\n                </Switch>\n            </Router>\n            <Footer />\n        </div>\n    );\n}","import './styles.scss';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app';\nimport { createStore } from \"redux\";\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}