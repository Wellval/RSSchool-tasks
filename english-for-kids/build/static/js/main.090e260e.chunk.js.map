{"version":3,"sources":["models/GameActions.ts","shared/images.ts","components/Header.tsx","components/Footer.tsx","components/HomePage.tsx","components/Rating.tsx","components/CategoryPage.tsx","shared/categoryImages.ts","components/StatsPage.tsx","app.tsx","index.tsx"],"names":["GameActions","data","category","image","Header","currentAction","setCurrentAction","shuffledAudios","count","setCount","useState","menuVisibility","setMenuVisibility","themeColor","setThemeColor","wrapperRef","useRef","location","useLocation","handleClickOutside","e","current","contains","target","useEffect","document","addEventListener","removeEventListener","Train","pathname","ref","className","onClick","map","index","to","exact","x","includes","type","id","checked","onChange","Play","htmlFor","Started","Audio","play","Footer","href","src","alt","HomePage","Rating","choices","choice","CategoryPage","setChoices","failures","setFailures","cards","setCards","wordParams","trained","correct","incorrect","percentage","images","cardObjects","Array","from","name","flipped","guessed","handleFlip","preventDefault","changeWordParam","param","p","localStorage","getItem","params","JSON","parse","setItem","stringify","guessWord","stopPropagation","console","log","setTimeout","chosenRight","chosenWrong","slice","length","classList","value","sayWord","isFlipped","flipDirection","onMouseLeave","rus","StatsPage","singleImg","object","toFixed","App","audios","setAudios","setShuffledAudios","filter","querySelector","setAttribute","sort","Math","random","path","render","props","match","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.090e260e.chunk.js","sourcesContent":["export enum GameActions {\n    'Train',\n    'Play',\n    'Started'\n}","export const data = [\n    {\n        category: 'clothes',\n        image: 'clothes.png',\n    },\n    {\n        category: 'actions-a',\n        image: 'dance.png',\n    },\n    {\n        category: 'actions-b',\n        image: 'sleep.png',\n    },\n    {\n        category: 'actions-c',\n        image: 'cook.png',\n    },\n    {\n        category: 'food',\n        image: 'food.png',\n    },\n    {\n        category: 'emotions',\n        image: 'happy.png',\n    },\n    {\n        category: 'animals-a',\n        image: 'owl.png',\n    },\n    {\n        category: 'animals-b',\n        image: 'raccoon.png',\n    },\n];\n","import React, { useState, useRef } from 'react';\nimport { data } from '../shared/images';\nimport {\n    NavLink,\n    useLocation\n} from \"react-router-dom\";\nimport { useEffect } from 'react';\n\nimport { GameActions } from '../models/GameActions';\n\ninterface Props {\n    currentAction: GameActions;\n    setCurrentAction: (value: GameActions) => void;\n    shuffledAudios: Array<string>;\n    count: number;\n    setCount: (value: number) => void;\n}\n\nexport const Header = ({ currentAction, setCurrentAction, shuffledAudios, count, setCount } : Props) => {\n    const [menuVisibility, setMenuVisibility] = useState(false);\n    const [themeColor, setThemeColor] = useState('pink');\n  \n    const wrapperRef = useRef<any>();\n\n    const location = useLocation();\n\n    const changeMode = () => {\n        if (themeColor === 'blue') {\n            setThemeColor('pink');\n        } else setThemeColor('blue');\n       setCurrentAction(currentAction === GameActions.Train ? GameActions.Play : GameActions.Train);\n    }\n    \n    const openMenu = () => {\n        setMenuVisibility(!menuVisibility);\n    }\n\n    const handleClickOutside = (e: Event) => {\n        if (wrapperRef.current && !wrapperRef.current.contains(e.target)) {\n            setMenuVisibility(false);\n        }\n    }\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => document.removeEventListener('mousedown', handleClickOutside);\n    });\n\n    useEffect(() => {\n        setCurrentAction(GameActions.Train);\n        setMenuVisibility(false);\n    }, [location.pathname])\n\n    const changeStartButton = (e: React.MouseEvent) => {\n        if (currentAction === GameActions.Started) {\n            new Audio(shuffledAudios[count]).play();\n        }\n        setCurrentAction(GameActions.Started);\n    }\n\n    return (\n        <header>\n            <span ref={wrapperRef}>\n                <div className=\"hamburger-menu\" onClick={openMenu}>\n                    {[1, 2, 3].map(index => <div key={\"line-\" + index} className={`line line-${index} \n                    ${menuVisibility ? \"cross\": \"\"} ${themeColor === 'blue' ? \"light-blue\" : \"\"}`}></div>)}\n                </div>\n                <nav className={`${menuVisibility === true ? \"navbar active\" : \"navbar\"} ${themeColor === 'blue' ? \"blue\" : \"\"}`}>\n                    <ul className=\"nav-list\">\n                        <li className=\"nav-item\">\n                            <NavLink to=\"/\" exact={true} className={`nav-link ${location.pathname === \"/\" ? \"active\" : \"\"}`}>Main Page</NavLink>\n                        </li>\n                        {\n                            data.map((x, index) =>\n                                <li key={index} className={`nav-item`}>\n                                    <NavLink to={\"/category/\" + x.category} className={`nav-link \n                                    ${location.pathname.includes(\"/category/\" + x.category) ? \"active\" : \"\"}`}>{x.category}</NavLink>\n                                </li>\n                            )\n                        }\n                        <li className=\"nav-item\">\n                            <NavLink to=\"/statistics\" className={`nav-link ${location.pathname === \"/statistics\" ? \"active\" : \"\"}`}>Statistics</NavLink>\n                        </li>\n                    </ul>\n                </nav>\n            </span>\n            <div className=\"buttons\">\n                <div className=\"toggler\">\n                    <input type=\"checkbox\" className=\"checkbox\" id=\"checkbox\" checked={currentAction === GameActions.Train ?\n                    false :\n                    true\n                    } onChange={changeMode} />\n                    <label htmlFor=\"checkbox\" className=\"label\">\n                        <div className=\"play-mode\">Play</div>\n                        <div className=\"train-mode\">Train</div>\n                        <div className=\"ball\"></div>\n                    </label>\n                </div>\n                {\n                    currentAction !== GameActions.Train ? \n                    <button className=\"start-game\" onClick={(e) => changeStartButton(e)}>{ currentAction === GameActions.Started ? 'repeat' : 'play'}</button> :\n                    <div></div>\n                }\n            </div>\n        </header>\n    );\n};\n","import React, { useState, useRef, MouseEvent } from 'react';\nimport ReactDOM from 'react-dom';\n\nexport const Footer = () => {\n    return (\n        <footer>\n            <a href=\"https://github.com/Wellval\">Github</a>\n            <div className=\"rs-logo-year\">2021\n            <a className=\"logo-link\" href=\"https://rs.school/js/\">\n                <img src=\"../rs-school-logo.svg\" alt=\"\" />\n            </a>\n            </div>\n        </footer>\n    )\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { data } from '../shared/images';\n\nexport const HomePage = () => {\n    return (\n        <main>\n            <div className=\"main-wrapper\">\n            {\n                data.map((x, index) => \n                    <div className='main-card-container'>\n                        <NavLink to={\"/category/\" + x.category} key={index} className={`pink-card`}>\n                            <img src={x.image} />\n                            <p>{x.category}</p>\n                        </NavLink>\n                    </div>\n                )\n            }\n            </div>\n        </main>\n    );\n} ","import React, { useEffect } from 'react';\nimport { GameActions } from '../models/GameActions';\n\ninterface Props {\n    choices: Array<boolean>;\n    currentAction: GameActions;\n}\n\nexport const Rating = ({ choices, currentAction }: Props) => {\n\n    return (\n        <div className=\"rating\">\n        {\n            currentAction === GameActions.Started ? choices.map(choice =>\n                choice === true ? <i className=\"fas fa-star\"></i> : <i className=\"fas fa-heart-broken\"></i>\n            ) : ''\n        }\n            \n        </div>\n    );\n}","import React, { useEffect, useState } from \"react\";\nimport ReactCardFlip from 'react-card-flip';\nimport { GameActions } from '../models/GameActions';\nimport { Rating } from \"./Rating\";\n\n\ninterface Props {\n    name: string;\n    currentAction: GameActions;\n    category: Category;\n    shuffledAudios: Array<string>\n    count: number;\n    setCount: (value: number) => void;\n    failures: number;\n    setFailures: (value: number) => void;\n    choices: Array<boolean>\n    setChoices: (value: Array<boolean>) => void;\n}\n\ninterface Cards {\n    name: string;\n    flipped: boolean;\n    guessed: boolean;\n}\n\ninterface Category {\n    images: Array<string>;\n    category: string;\n    rus: Array<string>;\n}\n\nexport const CategoryPage = ({ setChoices, choices, currentAction, category, shuffledAudios, count, setCount, failures, setFailures }: Props) => {\n    const [cards, setCards] = useState<Array<Cards>>([]);\n    const wordParams = {\n        trained: 0,\n        correct: 0,\n        incorrect: 0,\n        percentage: 0\n    }\n\n    useEffect(() => {\n        if (category.images) {\n            let cardObjects = Array.from(category.images).map(x => ({ name: x, flipped: false, guessed: false }));\n            setCards(cardObjects)\n        }\n        setChoices([]);\n    }, [currentAction, location.pathname]);\n\n    const handleFlip = (name: string, e: React.MouseEvent) => {\n        if (currentAction === GameActions.Train) {\n            e.preventDefault();\n            setCards(cards.map(x => {\n                if (x.name === name) {\n                    x.flipped = !x.flipped;\n                }\n                return x;\n            }));\n        }\n    };\n\n    const changeWordParam = (name: string, param: number, p: string) => {\n        if (!localStorage.getItem(name)) {\n            param++;\n            localStorage.setItem(name, JSON.stringify(wordParams))\n        } else {\n            let params = JSON.parse(localStorage.getItem(name)!);\n            params[p]++;\n            localStorage.setItem(name, JSON.stringify(params))\n        }\n    }\n\n    const sayWord = (name: string, e: React.MouseEvent) => {\n        e.preventDefault();\n        if ((e.target as HTMLElement).classList.value !== 'fas fa-redo-alt' && currentAction === GameActions.Train) {\n            new Audio('/' + category.category + '/' + name + '.mp3').play();\n        }\n        if (currentAction === GameActions.Train) {\n            changeWordParam(name, wordParams.trained, 'trained')\n        }\n    }\n\n    useEffect(() => {\n        new Audio(shuffledAudios[count]).play();\n    }, [shuffledAudios])\n\n    const chosenRight = (name: string) => {\n        setChoices([...choices, true]);\n                setCount(count + 1);\n                changeWordParam(name, wordParams.incorrect, 'correct')\n                new Audio('/well-done.mp3').play();\n                cards.map(x => {\n                    if (x.name === name) {\n                        x.guessed = !x.guessed;\n                        console.log(x)\n                    }\n                })\n                setTimeout(() => {\n                    new Audio(shuffledAudios[count + 1]).play();\n                }, 2000)\n    }\n\n    const chosenWrong = (name: string) => {\n        changeWordParam(name, wordParams.incorrect, 'incorrect')\n        setChoices([...choices, false]);\n        new Audio('/error.mp3').play();\n        setFailures(failures + 1);\n    }\n\n    const guessWord = (name: string, e: React.MouseEvent) => {\n        e.stopPropagation();\n        if (currentAction === GameActions.Started) {\n            shuffledAudios[count].includes(name) ? chosenRight(name) : chosenWrong(name);\n            if (shuffledAudios.slice(count).length - 1 === 0) {\n                (failures === 0) ? new Audio('/success.wav').play() : new Audio('/failure.mp3').play();\n                setTimeout(() => { location.pathname = '/' }, 4000);\n            }\n        }\n    }\n\n    const gameOverView = () => <div className='overlay'>\n        { failures === 0 ?\n            <div className='overlay'><h2 className='win'>Success!</h2></div> :\n            <div>\n                <h2 className='loose'>Work more!</h2>\n                <p>Number of mistakes: {failures}</p>\n            </div>\n        }\n    </div>\n\n    const playView = () => <div className=\"main-wrapper\">\n        {\n            cards.map((x, index) =>\n                <div className={(x.guessed === true) && currentAction === GameActions.Started ? 'card-container guessed' : 'card-container'} \n                id={`${x.name}`}\n                onClick={(e) => {\n                    sayWord(x.name, e)\n                    guessWord(x.name, e)\n                }}>\n                    <ReactCardFlip key={index} isFlipped={x.flipped} flipDirection=\"vertical\">\n                        <div className=\"pink-card\" id={`${x.name}`}>\n                            <img className={currentAction !== GameActions.Train ? 'play-mode' : ''}\n                                src={'/' + category.category + '/' + x.name + '.png'} />\n                            {\n                                currentAction === GameActions.Train ?\n                                    <p className=\"word\">{x.name}<span>\n                                        <i className=\"fas fa-redo-alt\" onClick={(e) => handleFlip(x.name, e)}></i>\n                                    </span></p> :\n                                    ''\n                            }\n                        </div>\n                        <div className=\"pink-card\" onMouseLeave={(e) => handleFlip(x.name, e)}>\n                            <img className={currentAction !== GameActions.Train ? 'play-mode' : ''} src={'/' + category.category + '/' + x.name + '.png'} />\n                            {\n                                currentAction === GameActions.Train ?\n                                    <p className=\"word\">{category.rus[index]}<span><i className=\"fas fa-redo-alt\"></i></span></p> :\n                                    ''\n                            }\n                        </div>\n                    </ReactCardFlip>\n                </div>\n            )\n        }\n    </div>\n\n    return (\n        <main>\n            <h2>{category.category}</h2>\n            <Rating\n                choices={choices}\n                currentAction={currentAction}\n            /> \n            {(count === shuffledAudios.length && currentAction === GameActions.Started) ?\n                gameOverView() : playView()\n            }\n        </main>\n    );\n}","export const images = [\n    {\n        category: \"food\",\n        images: [\n            'cheese',\n            'cake',\n            'cherry',\n            'coconut',\n            'hamburger',\n            'meat',\n            'sandwich',\n            'watermelon',\n        ],\n        rus: [\n            'сыр',\n            'пирог',\n            'вишня',\n            'кокос',\n            'гамбургер',\n            'мясо',\n            'бутерброд',\n            'арбуз',\n        ],\n    },\n    {\n        category: \"clothes\",\n        images: [\n            'blouse',\n            'bag',\n            'dress',\n            'hat',\n            'skirt',\n            'sweater',\n            't-shirt',\n            'trousers',\n        ],\n        rus: [\n            'блуза',\n            'сумка',\n            'платье',\n            'шляпа',\n            'юбка',\n            'свитер',\n            'футболка',\n            'штаны',\n        ]\n    },\n    {\n        category: 'emotions',\n        images: [\n            'angry',\n            'bored',\n            'happy',\n            'insidious',\n            'sad',\n            'scared',\n            'shy',\n            'surprised'\n        ],\n        rus: [\n            'злой',\n            'скучающий',\n            'счастливый',\n            'коварный',\n            'грустный',\n            'испуганный',\n            'стеснительный',\n            'удивленный'\n        ],\n    },\n    {\n        category: 'animals-a',\n        images: [\n            'eagle',\n            'giraffe',\n            'lamb',\n            'octopus',\n            'owl',\n            'shark',\n            'snake',\n            'squirrel'\n        ],\n        rus: [\n            'орел',\n            'жираф',\n            'ягненок',\n            'осминог',\n            'сова',\n            'акула',\n            'змея',\n            'белка'\n        ],\n    },\n    {\n        category: 'animals-b',\n        images: [\n            'cat',\n            'crab',\n            'dog',\n            'fish',\n            'fox',\n            'panda',\n            'raccoon',\n            'zebra'\n        ],\n        rus: [\n            'кот',\n            'краб',\n            'собака',\n            'рыба',\n            'лиса',\n            'панда',\n            'енот',\n            'зебра'\n        ],\n    },\n    {\n        category: 'actions-a',\n        images: [\n            'dance',\n            'fly',\n            'read',\n            'ring',\n            'run',\n            'sing',\n            'ski',\n            'swim'\n        ],\n        rus: [\n            'танцевать',\n            'летать',\n            'читать',\n            'звонить',\n            'бежать',\n            'петь',\n            'кататься на лыжах',\n            'плавать'\n        ]\n    },\n    {\n        category: 'actions-b',\n        images: [\n            'catch',\n            'cry',\n            'hang',\n            'jump',\n            'present',\n            'sleep',\n            'walk',\n            'teach'\n        ],\n        rus: [\n            'ловить',\n            'плакать',\n            'висеть',\n            'прыгать',\n            'дарить',\n            'спать',\n            'ходить',\n            'обучать'\n        ],\n    },\n    {\n        category: 'actions-c',\n        images: [\n            'carry',\n            'cook',\n            'drink',\n            'eat',\n            'giggle',\n            'hug',\n            'ride',\n            'scratch'\n        ],\n        rus: [\n            'нести',\n            'готовить',\n            'пить',\n            'есть',\n            'хихикать',\n            'обнимать',\n            'ехать',\n            'царапать'\n        ],\n    },\n\n]\n","import { images } from '../shared/categoryImages';\n\ninterface Props {\n    category: Category;\n}\n\ninterface Category {\n    images: Array<string>;\n    category: string;\n    rus: Array<string>;\n}\n\nexport const StatsPage = ({ category }: Props) => {\n\n    return (\n        <main>\n            <h2>Statistics</h2>\n            <div className=\"stats-container\">\n                <table className=\"stats-table\">\n                    <thead className=\"table-header\">\n                        <tr className=\"stats-titles\">\n                            <th className=\"stats-item\">\n                                Category\n                            </th>\n                            <th className=\"stats-item\">\n                                Word\n                            </th>\n                            <th className=\"stats-item\">\n                                Translation\n                            </th>\n                            <th className=\"stats-item\">\n                                Trained\n                            </th>\n                            <th className=\"stats-item\">\n                                Correct\n                            </th>\n                            <th className=\"stats-item\">\n                                Incorrect\n                            </th>\n                            <th className=\"stats-item\">\n                                Percentage\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            images.map(image => image.images.map((singleImg, index) => {\n                                const object = JSON.parse(localStorage.getItem(singleImg)!);\n                                const trained = (localStorage.getItem(singleImg)) ? +object.trained : 0;\n                                const correct = (localStorage.getItem(singleImg)) ? +object.correct : 0;\n                                const incorrect = (localStorage.getItem(singleImg)) ? +object.incorrect : 0;\n                                const percentage = (correct === 0 && incorrect === 0) ? 0 + '%' : ((100 / (correct + incorrect)) * correct).toFixed(2) + '%';\n                                return <tr> \n                                        <td> { image.category } </td>\n                                        <td> { singleImg } </td>\n                                        <td> { image.rus[index] } </td>\n                                        <td> { trained } </td>\n                                        <td> { correct } </td>\n                                        <td> { incorrect } </td>\n                                        <td> {  percentage } </td>\n                                    </tr>\n                            }))\n                        }\n                        \n                    </tbody>\n                </table>\n            </div>\n        </main>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Header } from './components/Header';\nimport { Footer } from './components/Footer';\n\nimport { HomePage } from './components/HomePage';\nimport { CategoryPage } from './components/CategoryPage';\nimport { images } from './shared/categoryImages';\n\nimport { GameActions } from './models/GameActions';\nimport { StatsPage } from './components/StatsPage';\n\nexport const App = () => {\n    const [currentAction, setCurrentAction] = useState(GameActions.Train);\n    const [audios, setAudios] = useState<Array<string>>([]);\n    const [choices, setChoices] = useState<Array<boolean>>([]);\n    let [failures, setFailures] = useState<number>(0);\n    let [count, setCount] = useState<number>(0);\n    const [shuffledAudios, setShuffledAudios] = useState<Array<string>>([]);\n    const category = images.filter((x) => x.category === location.pathname.slice(10))[0];\n\n    useEffect(() => {\n        if (category) {\n            setAudios(category.images.map(name => `/${category.category}/${name}.mp3`));\n        } \n        document.querySelector('#checkbox')?.setAttribute('checked', 'false');\n    }, [location.pathname])\n\n    useEffect(() => {\n        if (currentAction === GameActions.Started) {\n            setShuffledAudios(audios.slice().sort(() => Math.random() - 0.5));\n        }\n        setCount(0)\n    }, [currentAction]);\n\n    return (\n        <div className=\"view\">\n            <Router>\n                <Header \n                    currentAction={currentAction} \n                    setCurrentAction={setCurrentAction}\n                    shuffledAudios={shuffledAudios}\n                    count={count}\n                    setCount={setCount}\n                />\n                <Switch>\n                    <Route path=\"/category/:name\" render={(props) => \n                        <CategoryPage \n                            name={props.match.params.name}\n                            currentAction={currentAction}\n                            category={images.filter((x) => x.category === props.match.params.name)[0]}\n                            shuffledAudios={shuffledAudios}\n                            count={count}\n                            setCount={setCount}\n                            failures={failures}\n                            setFailures={setFailures}\n                            choices={choices}\n                            setChoices={setChoices}\n                        />\n                    } />\n                    <Route path=\"/statistics\" render={(props) => \n                        <StatsPage\n                            category={category}\n                        />\n                    } />\n                    <Route exact path=\"/\" render={HomePage} />\n                </Switch>\n            </Router>\n            <Footer />\n        </div>\n    );\n}","import './styles.scss';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app';\nimport { createStore } from \"redux\";\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}