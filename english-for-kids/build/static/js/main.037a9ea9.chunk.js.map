{"version":3,"sources":["models/GameActions.ts","shared/images.ts","components/Header.tsx","components/Footer.tsx","components/HomePage.tsx","components/CategoryPage.tsx","shared/categoryImages.ts","app.tsx","index.tsx"],"names":["GameActions","data","category","image","Header","name","currentAction","setCurrentAction","shuffledAudios","audios","setAudios","useState","menuVisibility","setMenuVisibility","themeColor","setThemeColor","wrapperRef","useRef","location","useLocation","handleClickOutside","e","current","contains","target","useEffect","document","addEventListener","removeEventListener","Train","pathname","ref","className","onClick","map","index","to","exact","x","includes","type","id","checked","onChange","Play","htmlFor","Started","Audio","length","play","Footer","href","src","alt","HomePage","CategoryPage","setShuffledAudios","cards","setCards","failures","console","log","ratingWrapper","querySelector","images","cardObjects","Array","from","flipped","innerHTML","cardsDisabled","getElementsByClassName","forEach","card","classList","remove","handleFlip","preventDefault","a","playSound","isFlipped","flipDirection","value","localStorage","getItem","toString","sayWord","lastShuffled","getElementById","add","pop","star","createElement","append","setTimeout","push","brokenHeart","guessWord","onMouseLeave","rus","App","filter","slice","setAttribute","sort","Math","random","setItem","path","render","props","match","params","ReactDOM"],"mappings":"2JAAYA,E,6CCACC,EAAO,CAChB,CACIC,SAAU,UACVC,MAAO,eAEX,CACID,SAAU,YACVC,MAAO,aAEX,CACID,SAAU,YACVC,MAAO,aAEX,CACID,SAAU,YACVC,MAAO,YAEX,CACID,SAAU,OACVC,MAAO,YAEX,CACID,SAAU,WACVC,MAAO,aAEX,CACID,SAAU,YACVC,MAAO,WAEX,CACID,SAAU,YACVC,MAAO,iB,SD/BHH,O,iBAAAA,I,eAAAA,I,sBAAAA,M,gBEqBCI,EAAS,SAAC,GAAyF,EAAvFC,KAAwF,IAAlFC,EAAiF,EAAjFA,cAAeC,EAAkE,EAAlEA,iBAAqCC,GAA6B,EAAhDC,OAAgD,EAAxCC,UAAwC,EAA7BF,gBAE/E,EAA4CG,oBAAS,GAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAoCF,mBAAS,QAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EAAaC,mBAEbC,EAAWC,cAaXC,EAAqB,SAACC,GACpBL,EAAWM,UAAYN,EAAWM,QAAQC,SAASF,EAAEG,SACrDX,GAAkB,IAI1BY,qBAAU,WAEN,OADAC,SAASC,iBAAiB,YAAaP,GAChC,kBAAMM,SAASE,oBAAoB,YAAaR,OAG3DK,qBAAU,WAKNlB,EAAiBP,EAAY6B,OAC7BhB,GAAkB,KACnB,CAACK,EAASY,WASb,OACI,mCACI,uBAAMC,IAAKf,EAAX,UACI,qBAAKgB,UAAU,iBAAiBC,QAlC3B,WACbpB,GAAmBD,IAiCX,SACK,CAAC,EAAG,EAAG,GAAGsB,KAAI,SAAAC,GAAK,OAAI,qBAA2BH,UAAS,oBAAeG,EAAf,kCAC1DvB,EAAiB,QAAS,GADgC,YACX,SAAfE,EAAwB,aAAe,KADvC,QAAUqB,QAGhD,qBAAKH,UAAS,WAAwB,IAAnBpB,EAA0B,gBAAkB,SAAjD,YAA4E,SAAfE,EAAwB,OAAS,IAA5G,SACI,qBAAIkB,UAAU,WAAd,UACI,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CAASI,GAAG,IAAIC,OAAO,EAAML,UAAS,mBAAoC,MAAtBd,EAASY,SAAmB,SAAW,IAA3F,yBAGA7B,EAAKiC,KAAI,SAACI,EAAGH,GAAJ,OACL,oBAAgBH,UAAS,WAAzB,SACI,cAAC,IAAD,CAASI,GAAI,aAAeE,EAAEpC,SAAU8B,UAAS,yDAC/Cd,EAASY,SAASS,SAAS,aAAeD,EAAEpC,UAAY,SAAW,IADrE,SAC4EoC,EAAEpC,YAFzEiC,cAS7B,sBAAKH,UAAU,UAAf,UACI,sBAAKA,UAAU,UAAf,UACI,uBAAOQ,KAAK,WAAWR,UAAU,WAAWS,GAAG,WAAWC,QAASpC,IAAkBN,EAAY6B,MAG/Fc,SAlEC,WAEX5B,EADe,SAAfD,EACc,OACG,QACtBP,EAAiBD,IAAkBN,EAAY6B,MAAQ7B,EAAY4C,KAAO5C,EAAY6B,UA+DzE,wBAAOgB,QAAQ,WAAWb,UAAU,QAApC,UACI,qBAAKA,UAAU,YAAf,kBACA,qBAAKA,UAAU,aAAf,mBACA,qBAAKA,UAAU,eAInB1B,IAAkBN,EAAY6B,MAC9B,wBAAQG,UAAU,aAAaC,QAAS,SAACZ,GAAD,OA3ChDf,IAAkBN,EAAY8C,SAC9B,IAAIC,MAAMvC,EAAeA,EAAewC,OAAS,IAAIC,YAEzD1C,EAAiBP,EAAY8C,UAwCjB,SAAuExC,IAAkBN,EAAY8C,QAAU,SAAW,SAC1H,+BCvGPI,EAAS,WAClB,OACI,mCACI,mBAAGC,KAAK,6BAAR,oBACA,sBAAKnB,UAAU,eAAf,iBACA,mBAAGA,UAAU,YAAYmB,KAAK,wBAA9B,SACI,qBAAKC,IAAI,wBAAwBC,IAAI,cCLxCC,EAAW,WACpB,OACI,+BACI,qBAAKtB,UAAU,eAAf,SAEI/B,EAAKiC,KAAI,SAACI,EAAGH,GAAJ,OACL,qBAAKH,UAAU,sBAAf,SACI,eAAC,IAAD,CAASI,GAAI,aAAeE,EAAEpC,SAAsB8B,UAAS,YAA7D,UACI,qBAAKoB,IAAKd,EAAEnC,QACZ,4BAAImC,EAAEpC,aAFmCiC,a,0CCexDoB,EAAe,SAAC,GAA+G,EAA7GhD,iBAA8G,IAA5FD,EAA2F,EAA3FA,cAAeJ,EAA4E,EAA5EA,SAA6BM,GAA+C,EAAlEC,OAAkE,EAA1DC,UAA0D,EAA/CF,gBACzF,GADwI,EAA/BgD,kBAC/E7C,mBAAuB,KAAjD,mBAAO8C,EAAP,KAAcC,EAAd,KACIC,EAA0B,GAC9BC,QAAQC,IAAI,IAAKF,GACjB,IAAMG,EAAgBpC,SAASqC,cAAc,WAE7CtC,qBAAU,WACN,GAAIvB,EAAS8D,OAAQ,CACjB,IAAIC,EAAcC,MAAMC,KAAKjE,EAAS8D,QAAQ9B,KAAI,SAAAI,GAAC,MAAK,CAAEjC,KAAMiC,EAAG8B,SAAS,MAC5EV,EAASO,MAEd,CAAC/D,IAEJuB,qBAAU,WACN,GAAInB,IAAkBN,EAAY8C,QAAS,CACnCgB,IACAA,EAAcO,UAAY,IAE9B,IAAIC,EAAgB5C,SAAS6C,uBAAuB,WACpDL,MAAMC,KAAKG,GAAeE,SAAQ,SAAAC,GAC9BA,EAAKC,UAAUC,OAAO,iBAG/B,CAACrE,IAEJ,IAAMsE,EAAa,SAACvE,EAAcgB,GAC1Bf,IAAkBN,EAAY6B,QAC9BR,EAAEwD,iBACFnB,EAASD,EAAMvB,KAAI,SAAAI,GAIf,OAHIA,EAAEjC,OAASA,IACXiC,EAAE8B,SAAW9B,EAAE8B,SAEZ9B,QAYnBb,qBAAU,WAAM,4CACZ,sBAAAqD,EAAA,sEACU,IAAI/B,MAAMvC,EAAeA,EAAewC,OAAS,IAAIC,OAD/D,4CADY,uBAAC,WAAD,wBAIZ8B,KACD,CAACvE,IAyCJ,OACI,iCAEI,6BAAKN,EAASA,WACd,qBAAK8B,UAAU,WAEf,qBAAKA,UAAU,eAAf,SAEQyB,EAAMvB,KAAI,SAACI,EAAGH,GAAJ,OACN,qBAAKH,UAAU,iBAAiBS,GAAE,UAAKH,EAAEjC,MAAzC,SACI,eAAC,IAAD,CAA2B2E,UAAW1C,EAAE8B,QAASa,cAAc,WAA/D,UACI,sBAAKjD,UAAU,YAAYC,QAAS,SAACZ,IAhEjD,SAAChB,EAAcgB,GAC3BA,EAAEwD,iBACgD,oBAA7CxD,EAAEG,OAAuBkD,UAAUQ,OAA+BC,aAAaC,QAAQ,YAAepF,EAAY6B,MAAOwD,YAC1H,IAAItC,MAAM,IAAM7C,EAASA,SAAW,IAAMG,EAAO,QAAQ4C,OA8DjCqC,CAAQhD,EAAEjC,KAAMgB,GAnD9B,SAAChB,EAAcgB,GAC7B,IAAIkE,EAAe/E,EAAeA,EAAewC,OAAS,GAC1D,GAAI1C,IAAkBN,EAAY8C,QAAS,CACvC,GAAIyC,EAAahD,SAASlC,GAAO,CAC7BqB,SAAS8D,eAAenF,GAAOqE,UAAUe,IAAI,WAC7CjF,EAAekF,MACf,IAAI3C,MAAM,kBAAkBE,OAC5B,IAAI0C,EAAOjE,SAASkE,cAAc,KAClCD,EAAK3D,UAAY,cACjB8B,EAAe+B,OAAOF,GACtBG,YAAW,WACP,IAAI/C,MAAMwC,GAActC,SACzB,KACHsC,EAAe/E,EAAeA,EAAewC,OAAS,OACnD,CACH,IAAID,MAAM,cAAcE,OACxBU,EAASoC,KAAK,WACd,IAAIC,EAActE,SAASkE,cAAc,KACzCI,EAAYhE,UAAY,sBACxB8B,EAAe+B,OAAOG,GAEI,IAA1BxF,EAAewC,SACS,IAApBW,EAASX,QACTtB,SAASqC,cAAc,QAASM,UAAhC,2DACA,IAAItB,MAAM,gBAAgBE,SAE1BvB,SAASqC,cAAc,QAASM,UAAhC,mIAEyBV,EAASX,OAFlC,oCAIA,IAAID,MAAM,gBAAgBE,QAE9B6C,YAAW,WAAQ5E,SAASY,SAAW,MAAO,OAoB1BmE,CAAU3D,EAAEjC,OAFhB,UAII,qBAAK2B,UAAY1B,EAAe+E,aAAerF,EAAY6B,MAAMwD,WAAa,YAAc,GACxFjC,IAAK,IAAMlD,EAASA,SAAW,IAAMoC,EAAEjC,KAAO,SAE9CC,IAAkBN,EAAY6B,MAC1B,oBAAGG,UAAU,OAAb,UAAqBM,EAAEjC,KAAK,+BACxB,mBAAG2B,UAAU,kBAAkBC,QAAS,SAACZ,GAAD,OAAOuD,EAAWtC,EAAEjC,KAAMgB,WAEtE,MAGZ,sBAAKW,UAAU,YAAYkE,aAAc,SAAC7E,GAAD,OAAOuD,EAAWtC,EAAEjC,KAAMgB,IAAnE,UACI,qBAAKW,UAAY1B,EAAe+E,aAAerF,EAAY6B,MAAMwD,WAAa,YAAc,GAAIjC,IAAK,IAAMlD,EAASA,SAAW,IAAMoC,EAAEjC,KAAO,SAEzIC,EAAe+E,aAAerF,EAAY6B,MAAMwD,WAC7C,oBAAGrD,UAAU,OAAb,UAAqB9B,EAASiG,IAAIhE,GAAO,+BAAM,mBAAGH,UAAU,yBAC5D,QApBIG,cC9HnC6B,EAAS,CAClB,CACI9D,SAAU,OACV8D,OAAQ,CACJ,SACA,OACA,SACA,UACA,YACA,OACA,WACA,cAEJmC,IAAK,CACD,qBACA,iCACA,iCACA,iCACA,yDACA,2BACA,yDACA,mCAGR,CACIjG,SAAU,UACV8D,OAAQ,CACJ,SACA,MACA,QACA,MACA,QACA,UACA,UACA,YAEJmC,IAAK,CACD,iCACA,iCACA,uCACA,iCACA,2BACA,uCACA,mDACA,mCAGR,CACIjG,SAAU,WACV8D,OAAQ,CACJ,QACA,QACA,QACA,YACA,MACA,SACA,MACA,aAEJmC,IAAK,CACD,2BACA,yDACA,+DACA,mDACA,mDACA,+DACA,iFACA,iEAGR,CACIjG,SAAU,YACV8D,OAAQ,CACJ,QACA,UACA,OACA,UACA,MACA,QACA,QACA,YAEJmC,IAAK,CACD,2BACA,iCACA,6CACA,6CACA,2BACA,iCACA,2BACA,mCAGR,CACIjG,SAAU,YACV8D,OAAQ,CACJ,MACA,OACA,MACA,OACA,MACA,QACA,UACA,SAEJmC,IAAK,CACD,qBACA,2BACA,uCACA,2BACA,2BACA,iCACA,2BACA,mCAGR,CACIjG,SAAU,YACV8D,OAAQ,CACJ,QACA,MACA,OACA,OACA,MACA,OACA,MACA,QAEJmC,IAAK,CACD,yDACA,uCACA,uCACA,6CACA,uCACA,2BACA,+FACA,+CAGR,CACIjG,SAAU,YACV8D,OAAQ,CACJ,QACA,MACA,OACA,OACA,UACA,QACA,OACA,SAEJmC,IAAK,CACD,uCACA,6CACA,uCACA,6CACA,uCACA,iCACA,uCACA,+CAGR,CACIjG,SAAU,YACV8D,OAAQ,CACJ,QACA,OACA,QACA,MACA,SACA,MACA,OACA,WAEJmC,IAAK,CACD,iCACA,mDACA,2BACA,2BACA,mDACA,mDACA,iCACA,sDC3KCC,EAAM,WACf,MAA0CzF,mBAASX,EAAY6B,OAA/D,mBAAOvB,EAAP,KAAsBC,EAAtB,KACA,EAA4BI,mBAAwB,IAApD,mBAAOF,EAAP,KAAeC,EAAf,KACA,EAA4CC,mBAAwB,IAApE,mBAAOH,EAAP,KAAuBgD,EAAvB,KACMtD,EAAW8D,EAAOqC,QAAO,SAAC/D,GAAD,OAAOA,EAAEpC,WAAagB,SAASY,SAASwE,MAAM,OAAK,GAsBlF,OAnBA7E,qBAAU,WAAO,IAAD,EACRvB,GACAQ,EAAUR,EAAS8D,OAAO9B,KAAI,SAAA7B,GAAI,iBAAQH,EAASA,SAAjB,YAA6BG,EAA7B,YAEtC,UAAAqB,SAASqC,cAAc,oBAAvB,SAAqCwC,aAAa,UAAW,SAC7D3C,QAAQC,IAAI3D,KACb,CAACgB,SAASY,WAEbL,qBAAU,WACFnB,IAAkBN,EAAY8C,SAC9BU,EAAkB/C,EAAO6F,QAAQE,MAAK,kBAAMC,KAAKC,SAAW,SAEjE,CAACpG,IAGJmB,qBAAU,WACN0D,aAAawB,QAAQ,SAAUrG,KAChC,CAACA,IAGA,sBAAK0B,UAAU,OAAf,UACI,eAAC,IAAD,WACI,cAAC,EAAD,CACI1B,cAAeA,EACfC,iBAAkBA,EAClBF,KAAMa,SAASY,SAASwE,MAAM,IAC9B7F,OAAQA,EACRC,UAAWA,EACXF,eAAgBA,IAEpB,eAAC,IAAD,WACI,cAAC,IAAD,CAAOoG,KAAK,kBAAkBC,OAAQ,SAACC,GAAD,OAClC,cAAC,EAAD,CACIzG,KAAMyG,EAAMC,MAAMC,OAAO3G,KACzBE,iBAAkBA,EAClBD,cAAeA,EACfJ,SAAU8D,EAAOqC,QAAO,SAAC/D,GAAD,OAAOA,EAAEpC,WAAa4G,EAAMC,MAAMC,OAAO3G,QAAM,GACvEI,OAAQA,EACRC,UAAWA,EACXF,eAAgBA,EAChBgD,kBAAmBA,OAG3B,cAAC,IAAD,CAAOnB,OAAK,EAACuE,KAAK,IAAIC,OAAQvD,UAGtC,cAAC,EAAD,QCzDZ2D,IAASJ,OACL,cAAC,EAAD,IACAnF,SAAS8D,eAAe,W","file":"static/js/main.037a9ea9.chunk.js","sourcesContent":["export enum GameActions {\n    'Train',\n    'Play',\n    'Started'\n}","export const data = [\n    {\n        category: 'clothes',\n        image: 'clothes.png',\n    },\n    {\n        category: 'actions-a',\n        image: 'dance.png',\n    },\n    {\n        category: 'actions-b',\n        image: 'sleep.png',\n    },\n    {\n        category: 'actions-c',\n        image: 'cook.png',\n    },\n    {\n        category: 'food',\n        image: 'food.png',\n    },\n    {\n        category: 'emotions',\n        image: 'happy.png',\n    },\n    {\n        category: 'animals-a',\n        image: 'owl.png',\n    },\n    {\n        category: 'animals-b',\n        image: 'raccoon.png',\n    },\n];\n","import React, { useState, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport { images } from '../shared/categoryImages';\nimport { data } from '../shared/images';\nimport {\n    NavLink,\n    useLocation\n} from \"react-router-dom\";\nimport { useEffect } from 'react';\n\nimport { GameActions } from '../models/GameActions';\n\ninterface Props {\n    name: string;\n    currentAction: GameActions;\n    setCurrentAction: (value: GameActions) => void;\n    audios: Array<string>;\n    setAudios: (value: Array<string>) => void;\n    shuffledAudios: Array<string>\n}\n\nexport const Header = ({ name, currentAction, setCurrentAction, audios, setAudios, shuffledAudios } : Props) => {\n    // const category = images.filter((x) => x.category === name)[0];\n    const [menuVisibility, setMenuVisibility] = useState(false);\n    const [themeColor, setThemeColor] = useState('pink');\n  \n    const wrapperRef = useRef<any>();\n\n    const location = useLocation();\n\n    const changeMode = () => {\n        if (themeColor === 'blue') {\n            setThemeColor('pink');\n        } else setThemeColor('blue');\n       setCurrentAction(currentAction === GameActions.Train ? GameActions.Play : GameActions.Train);\n    }\n    \n    const openMenu = () => {\n        setMenuVisibility(!menuVisibility);\n    }\n\n    const handleClickOutside = (e: Event) => {\n        if (wrapperRef.current && !wrapperRef.current.contains(e.target)) {\n            setMenuVisibility(false);\n        }\n    }\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => document.removeEventListener('mousedown', handleClickOutside);\n    });\n\n    useEffect(() => {\n    //     if (category) {\n    //         setAudios(category.images.map(name => `/${category.category}/${name}.mp3`));\n    //     } \n    //     document.querySelector('#checkbox')?.setAttribute('checked', 'false');\n        setCurrentAction(GameActions.Train);\n        setMenuVisibility(false);\n    }, [location.pathname])\n\n    const changeStartButton = (e: React.MouseEvent) => {\n        if (currentAction === GameActions.Started) {\n            new Audio(shuffledAudios[shuffledAudios.length - 1]).play();\n        }\n        setCurrentAction(GameActions.Started);\n    }\n\n    return (\n        <header>\n            <span ref={wrapperRef}>\n                <div className=\"hamburger-menu\" onClick={openMenu}>\n                    {[1, 2, 3].map(index => <div key={\"line-\" + index} className={`line line-${index} \n                    ${menuVisibility ? \"cross\": \"\"} ${themeColor === 'blue' ? \"light-blue\" : \"\"}`}></div>)}\n                </div>\n                <nav className={`${menuVisibility === true ? \"navbar active\" : \"navbar\"} ${themeColor === 'blue' ? \"blue\" : \"\"}`}>\n                    <ul className=\"nav-list\">\n                        <li className=\"nav-item\">\n                            <NavLink to=\"/\" exact={true} className={`nav-link ${location.pathname === \"/\" ? \"active\" : \"\"}`}>Main Page</NavLink>\n                        </li>\n                        {\n                            data.map((x, index) =>\n                                <li key={index} className={`nav-item`}>\n                                    <NavLink to={\"/category/\" + x.category} className={`nav-link \n                                    ${location.pathname.includes(\"/category/\" + x.category) ? \"active\" : \"\"}`}>{x.category}</NavLink>\n                                </li>\n                            )\n                        }\n                    </ul>\n                </nav>\n            </span>\n            <div className=\"buttons\">\n                <div className=\"toggler\">\n                    <input type=\"checkbox\" className=\"checkbox\" id=\"checkbox\" checked={currentAction === GameActions.Train ?\n                    false :\n                    true\n                    } onChange={changeMode} />\n                    <label htmlFor=\"checkbox\" className=\"label\">\n                        <div className=\"play-mode\">Play</div>\n                        <div className=\"train-mode\">Train</div>\n                        <div className=\"ball\"></div>\n                    </label>\n                </div>\n                {\n                    currentAction !== GameActions.Train ? \n                    <button className=\"start-game\" onClick={(e) => changeStartButton(e)}>{ currentAction === GameActions.Started ? 'repeat' : 'play'}</button> :\n                    <div></div>\n                }\n            </div>\n        </header>\n    );\n};\n","import React, { useState, useRef, MouseEvent } from 'react';\nimport ReactDOM from 'react-dom';\n\nexport const Footer = () => {\n    return (\n        <footer>\n            <a href=\"https://github.com/Wellval\">Github</a>\n            <div className=\"rs-logo-year\">2021\n            <a className=\"logo-link\" href=\"https://rs.school/js/\">\n                <img src=\"../rs-school-logo.svg\" alt=\"\" />\n            </a>\n            </div>\n        </footer>\n    )\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { data } from '../shared/images';\n\nexport const HomePage = () => {\n    return (\n        <main>\n            <div className=\"main-wrapper\">\n            {\n                data.map((x, index) => \n                    <div className='main-card-container'>\n                        <NavLink to={\"/category/\" + x.category} key={index} className={`pink-card`}>\n                            <img src={x.image} />\n                            <p>{x.category}</p>\n                        </NavLink>\n                    </div>\n                )\n            }\n            </div>\n        </main>\n    );\n} ","import React, { useEffect, useState } from \"react\";\nimport ReactCardFlip from 'react-card-flip';\nimport { GameActions } from '../models/GameActions';\n\ninterface Props {\n    name: string;\n    currentAction: GameActions;\n    setCurrentAction: (value: GameActions) => void;\n    category: Category;\n    audios: Array<string>;\n    setAudios: (value: Array<string>) => void;\n    setShuffledAudios: (value: Array<string>) => void;\n    shuffledAudios: Array<string>\n}\n\ninterface Cards {\n    name: string;\n    flipped: boolean;\n}\n\ninterface Category {\n    images: Array<string>;\n    category: string;\n    rus: Array<string>;\n}\n\nexport const CategoryPage = ({ setCurrentAction, currentAction, category, audios, setAudios, shuffledAudios, setShuffledAudios }: Props) => {\n    const [cards, setCards] = useState<Array<Cards>>([]);\n    let failures: Array<string> = [];\n    console.log(321, failures)\n    const ratingWrapper = document.querySelector('.rating');\n\n    useEffect(() => {\n        if (category.images) {\n            let cardObjects = Array.from(category.images).map(x => ({ name: x, flipped: false }));\n            setCards(cardObjects)\n        }\n    }, [category]);\n\n    useEffect(() => {\n        if (currentAction !== GameActions.Started) {\n            if (ratingWrapper) {\n                ratingWrapper.innerHTML = '';\n            }\n            let cardsDisabled = document.getElementsByClassName('guessed');\n            Array.from(cardsDisabled).forEach(card => {\n                card.classList.remove('guessed');\n            })\n        }\n    }, [currentAction]);\n\n    const handleFlip = (name: string, e: React.MouseEvent) => {\n        if (currentAction === GameActions.Train) {\n            e.preventDefault();\n            setCards(cards.map(x => {\n                if (x.name === name) {\n                    x.flipped = !x.flipped;\n                }\n                return x;\n            }));\n        }\n    };\n\n    const sayWord = (name: string, e: React.MouseEvent) => {\n        e.preventDefault();\n        if ((e.target as HTMLElement).classList.value !== 'fas fa-redo-alt' && localStorage.getItem('action') === (GameActions.Train).toString()) {\n            new Audio('/' + category.category + '/' + name + '.mp3').play();\n        }\n    }\n\n    useEffect(() => {\n        async function playSound() {\n            await new Audio(shuffledAudios[shuffledAudios.length - 1]).play()\n        }\n        playSound();\n    }, [shuffledAudios])\n\n    const guessWord = (name: string, e: React.MouseEvent) => {\n        let lastShuffled = shuffledAudios[shuffledAudios.length - 1];\n        if (currentAction === GameActions.Started) {\n            if (lastShuffled.includes(name)) {\n                document.getElementById(name)!.classList.add('guessed')\n                shuffledAudios.pop();\n                new Audio('/well-done.mp3').play();\n                let star = document.createElement('i');\n                star.className = 'fas fa-star';\n                ratingWrapper!.append(star);\n                setTimeout(() => {\n                    new Audio(lastShuffled).play();\n                }, 2000)\n                lastShuffled = shuffledAudios[shuffledAudios.length - 1];\n            } else {\n                new Audio('/error.mp3').play();\n                failures.push('failure');\n                let brokenHeart = document.createElement('i');\n                brokenHeart.className = 'fas fa-heart-broken';\n                ratingWrapper!.append(brokenHeart);\n            }\n            if (shuffledAudios.length === 0) {\n                if (failures.length === 0) {\n                    document.querySelector('main')!.innerHTML = `<div class='overlay'><h2 class='win'>Success!</h2></div>`;\n                    new Audio('/success.wav').play();\n                } else {\n                    document.querySelector('main')!.innerHTML = `<div class='overlay'>\n                    <h2 class='loose'>Work more!</h2>\n                    <p>Number of mistakes: ${failures.length}</p>\n                    </div>`;\n                    new Audio('/failure.mp3').play();\n                }\n                setTimeout(() => { location.pathname = '/' }, 2000);\n            }\n        }\n    }\n\n\n\n    return (\n        <main>\n            \n            <h2>{category.category}</h2>\n            <div className=\"rating\"></div>\n\n            <div className=\"main-wrapper\">\n                {\n                    cards.map((x, index) =>\n                        <div className='card-container' id={`${x.name}`}>\n                            <ReactCardFlip key={index} isFlipped={x.flipped} flipDirection=\"vertical\">\n                                <div className=\"pink-card\" onClick={(e) => {\n                                    sayWord(x.name, e)\n                                    guessWord(x.name, e)\n                                }}>\n                                    <img className={(currentAction).toString() !== GameActions.Train.toString() ? 'play-mode' : ''}\n                                        src={'/' + category.category + '/' + x.name + '.png'} />\n                                    {\n                                        currentAction === GameActions.Train ?\n                                            <p className=\"word\">{x.name}<span>\n                                                <i className=\"fas fa-redo-alt\" onClick={(e) => handleFlip(x.name, e)}></i>\n                                            </span></p> :\n                                            ''\n                                    }\n                                </div>\n                                <div className=\"pink-card\" onMouseLeave={(e) => handleFlip(x.name, e)}>\n                                    <img className={(currentAction).toString() !== GameActions.Train.toString() ? 'play-mode' : ''} src={'/' + category.category + '/' + x.name + '.png'} />\n                                    {\n                                        (currentAction).toString() === GameActions.Train.toString() ?\n                                            <p className=\"word\">{category.rus[index]}<span><i className=\"fas fa-redo-alt\"></i></span></p> :\n                                            ''\n                                    }\n                                </div>\n                            </ReactCardFlip>\n                        </div>\n                    )\n                }\n            </div>\n        </main>\n    );\n}","export const images = [\n    {\n        category: \"food\",\n        images: [\n            'cheese',\n            'cake',\n            'cherry',\n            'coconut',\n            'hamburger',\n            'meat',\n            'sandwich',\n            'watermelon',\n        ],\n        rus: [\n            'сыр',\n            'пирог',\n            'вишня',\n            'кокос',\n            'гамбургер',\n            'мясо',\n            'бутерброд',\n            'арбуз',\n        ],\n    },\n    {\n        category: \"clothes\",\n        images: [\n            'blouse',\n            'bag',\n            'dress',\n            'hat',\n            'skirt',\n            'sweater',\n            't-shirt',\n            'trousers',\n        ],\n        rus: [\n            'блуза',\n            'сумка',\n            'платье',\n            'шляпа',\n            'юбка',\n            'свитер',\n            'футболка',\n            'штаны',\n        ]\n    },\n    {\n        category: 'emotions',\n        images: [\n            'angry',\n            'bored',\n            'happy',\n            'insidious',\n            'sad',\n            'scared',\n            'shy',\n            'surprised'\n        ],\n        rus: [\n            'злой',\n            'скучающий',\n            'счастливый',\n            'коварный',\n            'грустный',\n            'испуганный',\n            'стеснительный',\n            'удивленный'\n        ],\n    },\n    {\n        category: 'animals-a',\n        images: [\n            'eagle',\n            'giraffe',\n            'lamb',\n            'octopus',\n            'owl',\n            'shark',\n            'snake',\n            'squirrel'\n        ],\n        rus: [\n            'орел',\n            'жираф',\n            'ягненок',\n            'осминог',\n            'сова',\n            'акула',\n            'змея',\n            'белка'\n        ],\n    },\n    {\n        category: 'animals-b',\n        images: [\n            'cat',\n            'crab',\n            'dog',\n            'fish',\n            'fox',\n            'panda',\n            'raccoon',\n            'zebra'\n        ],\n        rus: [\n            'кот',\n            'краб',\n            'собака',\n            'рыба',\n            'лиса',\n            'панда',\n            'енот',\n            'зебра'\n        ],\n    },\n    {\n        category: 'actions-a',\n        images: [\n            'dance',\n            'fly',\n            'read',\n            'ring',\n            'run',\n            'sing',\n            'ski',\n            'swim'\n        ],\n        rus: [\n            'танцевать',\n            'летать',\n            'читать',\n            'звонить',\n            'бежать',\n            'петь',\n            'кататься на лыжах',\n            'плавать'\n        ]\n    },\n    {\n        category: 'actions-b',\n        images: [\n            'catch',\n            'cry',\n            'hang',\n            'jump',\n            'present',\n            'sleep',\n            'walk',\n            'teach'\n        ],\n        rus: [\n            'ловить',\n            'плакать',\n            'висеть',\n            'прыгать',\n            'дарить',\n            'спать',\n            'ходить',\n            'обучать'\n        ],\n    },\n    {\n        category: 'actions-c',\n        images: [\n            'carry',\n            'cook',\n            'drink',\n            'eat',\n            'giggle',\n            'hug',\n            'ride',\n            'scratch'\n        ],\n        rus: [\n            'нести',\n            'готовить',\n            'пить',\n            'есть',\n            'хихикать',\n            'обнимать',\n            'ехать',\n            'царапать'\n        ],\n    },\n\n]\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Header } from './components/Header';\nimport { Footer } from './components/Footer';\n\nimport { HomePage } from './components/HomePage';\nimport { CategoryPage } from './components/CategoryPage';\nimport { images } from './shared/categoryImages';\n\nimport { GameActions } from './models/GameActions';\n\nexport const App = () => {\n    const [currentAction, setCurrentAction] = useState(GameActions.Train);\n    const [audios, setAudios] = useState<Array<string>>([]);\n    const [shuffledAudios, setShuffledAudios] = useState<Array<string>>([]);\n    const category = images.filter((x) => x.category === location.pathname.slice(10))[0];\n\n\n    useEffect(() => {\n        if (category) {\n            setAudios(category.images.map(name => `/${category.category}/${name}.mp3`));\n        } \n        document.querySelector('#checkbox')?.setAttribute('checked', 'false');\n        console.log(category)\n    }, [location.pathname])\n\n    useEffect(() => {\n        if (currentAction === GameActions.Started) {\n            setShuffledAudios(audios.slice().sort(() => Math.random() - 0.5));\n        }\n    }, [currentAction]);\n\n\n    useEffect(() => {\n        localStorage.setItem('action', currentAction as unknown as string);\n    }, [currentAction]);\n\n    return (\n        <div className=\"view\">\n            <Router>\n                <Header \n                    currentAction={currentAction} \n                    setCurrentAction={setCurrentAction}\n                    name={location.pathname.slice(10)}\n                    audios={audios}\n                    setAudios={setAudios}\n                    shuffledAudios={shuffledAudios}\n                />\n                <Switch>\n                    <Route path=\"/category/:name\" render={(props) => \n                        <CategoryPage \n                            name={props.match.params.name}\n                            setCurrentAction={setCurrentAction}\n                            currentAction={currentAction}\n                            category={images.filter((x) => x.category === props.match.params.name)[0]}\n                            audios={audios}\n                            setAudios={setAudios}\n                            shuffledAudios={shuffledAudios}\n                            setShuffledAudios={setShuffledAudios}\n                        />\n                    } />\n                    <Route exact path=\"/\" render={HomePage} />\n                </Switch>\n            </Router>\n            <Footer />\n        </div>\n    );\n}","import './styles.scss';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app';\nimport { createStore } from \"redux\";\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}